---
title: Cell Expansion
---

```{julia}
#| echo: false
#| expand: true
[(;
    thunk = function ()
        println("print call")
        display("display call")
        "return value"
    end,
    code = """
    # Fake code goes here.
    """,
    options = Dict("layout-ncol" => 2),
)]
```

```{julia}
#| expand: true
[
    (;
        thunk = function ()
            return [
                (;
                    thunk = function ()
                        return [(; thunk = () -> 1, options = Dict("layout-ncol" => 1))]
                    end,
                    options = Dict("expand" => true),
                ),
                (;
                    thunk = function ()
                        return [(; thunk = () -> (display(2); 2)), (; thunk = () -> 3)]
                    end,
                    options = Dict("expand" => true),
                ),
            ]
        end,
        options = Dict("expand" => true),
    ),
    (; thunk = () -> 4),
    (;
        thunk = () -> println("## Header"),
        options = Dict("output" => "asis", "echo" => false),
    ),
]
```

```{julia}
#| expand: true

# test if newly defined structs can be returned as iterators (requires certain
# invokelatest calls to be present)
struct QuartoCell
    thunk::Base.Callable
    options::Dict{String,Any}
    code::String
end

Base.iterate(c::QuartoCell) = Base.iterate(cells(c))
Base.iterate(c::QuartoCell, state) = Base.iterate(cells(c), state)
Base.IteratorSize(c::QuartoCell) = Base.SizeUnknown()

cells(q::QuartoCell) = (q,)

QuartoCell(() -> 123, Dict(), "")
```
